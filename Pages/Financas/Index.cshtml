@page
@model HipicaFacilSQL.Pages.Financas.IndexModel

@{
    ViewData["Title"] = "Index";
}

<h1>Cadastro de Receita/Despesa</h1>

<p>
    <a asp-page="Create"> <i class="fa-solid fa-plus"></i> Nova Receita/Despesa</a>
</p>

<canvas id="myChart" width="400" height="200"></canvas>


<form asp-page="./Index" method="get">
    <div class="form-actions no-color">
        <p>
            Encontre pelo Nome:
            <input type="text" name="SearchString" value="@Model.CurrentFilter" />
            <input type="submit" value="Pesquisar" class="btn btn-primary" /> |
            <a asp-page="./Index">Voltar para a tabela</a>
        </p>

    </div>
</form>

<table class="table">
    <thead>
        <tr>
            <th>
                <a asp-page="./Index" asp-route-sortOrder="@Model.NomeSort"
                   asp-route-currentFilter="@Model.CurrentFilter">
                    @Html.DisplayNameFor(model => model.Financas[0].Nome)
                </a>
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Financas[0].Valor)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Financas[0].Descricao)
            </th>
            <th>
                <a asp-page="./Index" asp-route-sortOrder="@Model.TipoSort"
                   asp-route-currentFilter="@Model.CurrentFilter">
                   @Html.DisplayNameFor(model => model.Financas[0].Tipo)
                </a>
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Financas[0].Quantidade)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model.Financas) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Nome)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Valor)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Descricao)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Tipo)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Quantidade)
            </td>
            <td>
               <a asp-page="./Edit" asp-route-id="@item.ID"><i class="fa-solid fa-pen"></i></a> |
                <a asp-page="./Details" asp-route-id="@item.ID"><i class="fa-solid fa-magnifying-glass"></i></a> |
                <a asp-page="./Delete" asp-route-id="@item.ID"><i class="fa-solid fa-trash"></i></a>
            </td>
        </tr>
}
    </tbody>
</table>




@{
    var prevDisabled = !Model.Financas.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.Financas.HasNextPage ? "disabled" : "";
}
<a asp-page="./Index"
   asp-route-sortOrder="@Model.CurrentSort"
   asp-route-pageIndex="@(Model.Financas.PageIndex - 1)"
   asp-route-currentFilter="@Model.CurrentFilter"
   class="btn btn-primary @prevDisabled">
    Anterior
</a>
<a asp-page="./Index"
   asp-route-sortOrder="@Model.CurrentSort"
   asp-route-pageIndex="@(Model.Financas.PageIndex + 1)"
   asp-route-currentFilter="@Model.CurrentFilter"
   class="btn btn-primary @nextDisabled">
    Próximo
</a>

@section Scripts {
    <script>
        // Dados de exemplo (substitua isso pelos seus dados reais)
        var despesaData = [100, 150, 200, 250];
        var receitaData = [200, 250, 300, 350];
        var labels = ["Janeiro", "Fevereiro", "Março", "Abril"];



        // Inicialização do gráfico
        var ctx = document.getElementById('myChart').getContext('2d');
        var myChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Despesa',
                    data: despesaData,
                    backgroundColor: 'rgba(255, 99, 132, 0.2)',
                    borderColor: 'rgba(255, 99, 132, 1)',
                    borderWidth: 1
                }, {
                    label: 'Receita',
                    data: receitaData,
                    backgroundColor: 'rgba(54, 162, 235, 0.2)',
                    borderColor: 'rgba(54, 162, 235, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                }
            }
        });
    </script>
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

}
